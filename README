# TETRIS

## Build

Use the following commands to build TETRIS

mkdir build && cd build
cmake ..
make


## Run

To be able to manage an application with TETRIS two steps are necessary.
First of all you need to start the TETRIS-server and give it the path
to the mappings for each program. The server executable is located in the
'bin'-directory.

After the server started up, it is now possible to run other applications and
let the TETRIS server manage them. To achieve this, one has to add the
TETRIS-client library to the program. This can be achieved by preloading the
library with the LD_PRELOAD primitive. The library is located in the 
'lib'-directory.

## Settings

### Server

See the help message of the server for information about how the server can be
tweaked.

### Client

The client reacts to two environment variables.

#### TETRIS_LOG_LEVEL

With this environmental variable you can control how much information the TETRIS
client library outputs. Possible values are DEBUG, INFO and ERROR.

#### TETRIS_DYNAMIC_MAPPING

This environment variable will tell tetris that no pinning should be used but instead
the threads should be left movable. Only the list of available CPUs will be limited to
the ones that the selected mapping contains.

#### TETRIS_COMPARE_CRITERIA

With this environment variable one can choose which characteristic of a mapping should
be compared when searching for the best possible mapping on the server. This option can
be changed per application that is executed. If omitted, execution time will be used as
comparison characteristic.

#### TETRIS_COMPARE_MORE_IS_BETTER

If not set, the tetris server will assume that smaller values for the mapping characteristic
are better than larger ones. Hence the server will always prefer the mapping for the
application with the smallest value in the compare characteristic. With this environment
variable one can change this behavior to more is better.

#### TETRIS_FILTER_CRITERIA

With this environment variable you can influence which mappings available for the tetris server
are actually considered for the application. Hence, one can filter out mappings that don't match
the given criteria. The syntax to define the filter is as follows:

    {mapping characteristic}{compare operator}{value}

Valid examples can look like the following:

    energyConsumption<2000          or
    totalExecutionTime<=100

Spaces at the beginning, end and around the compare operator are striped away. Currently supported
compare operators are: '<', '<=', '>', '>=', '==', '=', '!='

The given filter criteria is a positive criteria. This means, that only mappings that fulfill this
criteria are considered for the application.

#### TETRIS_PREFERRED_MAPPING

This environmental variable can be used to force the server to use one particular
mapping. The value of this variable should be the name of the preferred mapping.


